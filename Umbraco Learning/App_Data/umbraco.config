<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE root [<!ELEMENT articlesItem ANY>
<!ATTLIST articlesItem id ID #REQUIRED>
<!ELEMENT articlesMain ANY>
<!ATTLIST articlesMain id ID #REQUIRED>
<!ELEMENT simpleContentPage ANY>
<!ATTLIST simpleContentPage id ID #REQUIRED>
<!ELEMENT homePage ANY>
<!ATTLIST homePage id ID #REQUIRED>
]>
<root id="-1">
  <homePage id="1056" key="94336662-64eb-4493-9854-32194d3925d2" parentID="-1" level="1" creatorID="0" sortOrder="0" createDate="2018-03-17T15:20:56" updateDate="2018-04-04T11:35:28" nodeName="Homepage" urlName="homepage" path="-1,1056" isDoc="" nodeType="1055" creatorName="Amandeep Singh" writerName="Amandeep Singh" writerID="0" template="1054" nodeTypeAlias="homePage" isPublished="true">
    <bodyText><![CDATA[<p>React is a powerful declarative library and is becoming must have skill for all Front-End developers. As part of my web development career, learning React was very exciting; not only it teaches me how to make good use of functional programming but also how to approach my solution in a way which is more reusable and maintainable down the track. I appreciate the fact that I got to learn many things while developing few React and React Native projects. </p>
<p>I feel happy to share my experience with you guys and hope it could be worth of your time. sf</p>]]></bodyText>
    <pageTitle><![CDATA[Learn React With Me]]></pageTitle>
    <footerText><![CDATA[Copyright LearnReactWithMe Ltd 2018]]></footerText>
    <articleBodyText1><![CDATA[<p><a rel="noopener" href="https://reactjs.org/docs/composition-vs-inheritance.html" target="_blank" title="React Composition">React composition</a> is the key part to understand how to make UI more reusable and maintainable. It's recommended to use composition over inheritance and Facebook even claims that it is rare of cases where they have to use inheritance over composition. </p>]]></articleBodyText1>
    <articleTitle1><![CDATA[React Composition]]></articleTitle1>
    <articleBodyText2><![CDATA[<p>When I started learning React, it was indeed a learning curve for me. I followed many video tutorials and read few books to understand how React really differs from other DOM manipulating libraries. </p>
<p>Believe me, learning the basic concepts was half the battle won. I was told that React emphasizes on creating reusable components but I was weak in implementing that concept- given a UI, I would dump everything in one component and thinking I am done. Well, that was wrong; I was on the way of learning React as a newly born baby learns to walk slowly. </p>
<p>Understanding React Proptypes will help you to create reusable component and will let the users of those component know what props it depends on to render correctly. It follows the rule: Give me the props I depend on, and I shall not cause any warnings or errors while rendering. </p>
<p>Let us see how we can leverage the power of type checking and whats the proper way of using this awesome feature. </p>
<p><a data-udi="umb://document/de2779c37cf8499ca7c222522bcf37fd" href="/{localLink:umb://document/de2779c37cf8499ca7c222522bcf37fd}" title="Let's use composition confidently">Continue Reading...</a></p>
<p> </p>]]></articleBodyText2>
    <articleTitle2><![CDATA[React PropTypes]]></articleTitle2>
    <asideTitle><![CDATA[Latest in React ]]></asideTitle>
    <asideText><![CDATA[<ul>
<li>React Async Rendering</li>
<li>React new lifecycle hooks</li>
<li>React 16.3 and what's new</li>
</ul>]]></asideText>
    <simpleContentPage id="1066" key="82104695-5b1c-45b0-90e5-776021cb384b" parentID="1056" level="2" creatorID="0" sortOrder="0" createDate="2018-03-27T22:39:35" updateDate="2018-03-29T12:52:26" nodeName="Contact Us" urlName="contact-us" path="-1,1056,1066" isDoc="" nodeType="1065" creatorName="Amandeep Singh" writerName="Amandeep Singh" writerID="0" template="1064" nodeTypeAlias="simpleContentPage" isPublished="true">
      <pageTitle><![CDATA[Contact Us]]></pageTitle>
      <bodyText><![CDATA[<p>You can reach me via phone or email if you wish to learn and share more tips about React. </p>
<p> </p>
<p><strong>Phone</strong></p>
<p>+61487319174</p>
<p> </p>
<p><strong>Email</strong></p>
<p>aman.devfactory@gmail.com</p>]]></bodyText>
    </simpleContentPage>
    <articlesMain id="1074" key="6891d196-ea22-4ed0-8f66-946de1eebde3" parentID="1056" level="2" creatorID="0" sortOrder="1" createDate="2018-03-27T23:20:13" updateDate="2018-03-29T12:52:32" nodeName="Articles" urlName="articles" path="-1,1056,1074" isDoc="" nodeType="1071" creatorName="Amandeep Singh" writerName="Amandeep Singh" writerID="0" template="1070" nodeTypeAlias="articlesMain" isPublished="true">
      <articlesBodyText><![CDATA[<p>There's always a talk about using setState in right lifecycle hooks. And as we know setState is where the render cycle kicks in, it gets really important to understand the proper usage of setState function. </p>
<p> </p>]]></articlesBodyText>
      <articlesTitle><![CDATA[Dilemma of using setState in React LifeCycle Hooks]]></articlesTitle>
      <articlesItem id="1075" key="85906928-dddd-4caf-9557-fb0405386ab0" parentID="1074" level="3" creatorID="0" sortOrder="0" createDate="2018-03-27T23:23:52" updateDate="2018-03-29T12:52:36" nodeName="Dilemma of using setState in React LifeCycle Hooks" urlName="dilemma-of-using-setstate-in-react-lifecycle-hooks" path="-1,1056,1074,1075" isDoc="" nodeType="1073" creatorName="Amandeep Singh" writerName="Amandeep Singh" writerID="0" template="1072" nodeTypeAlias="articlesItem" isPublished="true">
        <articleTitle><![CDATA[React's setState - a better way to use it.]]></articleTitle>
        <articleContents><![CDATA[<p>TODO: write more</p>]]></articleContents>
      </articlesItem>
      <articlesItem id="1076" key="de2779c3-7cf8-499c-a7c2-22522bcf37fd" parentID="1074" level="3" creatorID="0" sortOrder="1" createDate="2018-03-27T23:29:20" updateDate="2018-03-29T12:52:39" nodeName="Let's use composition confidently" urlName="lets-use-composition-confidently" path="-1,1056,1074,1076" isDoc="" nodeType="1073" creatorName="Amandeep Singh" writerName="Amandeep Singh" writerID="0" template="1072" nodeTypeAlias="articlesItem" isPublished="true">
        <articleTitle><![CDATA[React propTypes - best friend for composition]]></articleTitle>
        <articleContents><![CDATA[<p>React propTypes is one of my favourite feature in React. It gives me confidence of writing components which are easy to reuse. I always see this feature as analogous to contracts. If I define some required propTypes in your B components, I wish to have these props passed by my parent component A. And if the parent components successfully supply these props, child component would always render the desired output. This is the power of React propType checking. </p>]]></articleContents>
      </articlesItem>
    </articlesMain>
  </homePage>
</root>